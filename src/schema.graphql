scalar Date

type Author {
  name: String!
  id: String!
  posts: [Post]
}

type Post {
  id: String!
  title: String!
  author: Author
}

type Activity {
  type: String!
  title: String!
  user: User!
  client: Client
  notes: String!
  creationDate: Date!
}

type Settings {
  language: String!
  dateFormat: String!
  pushNotifications: Boolean!
  unscribeEmailLink: Boolean!
  signature: String!
}

type User {
  _id: String!
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  settings: Settings
}

input InputSettings {
  language: String
  dateFormat: String
  pushNotifications: Boolean
  unscribeEmailLink: Boolean
  signature: String
}

input InputUser {
  email: String
  firstName: String
  lastName: String
  settings: InputSettings
}

type Client {
  _id: String!
  name: String!
  address: String!
  zipcode: String!
  telephone: String!
  city: String!
  user: String!
  type: String
  activities: [Activity]
}

type FilterOption {
  label: String!
  value: String!
}

type Filter {
  options: [FilterOption]!
  id: String!
  label: String!
}

type Query {
  posts: [Post]
  authors: [Author]
  users: [User]
  user: User
  client(_id: String): Client
  clients(type: [String], city: [String]): [Client]
  activity(_id: String): Activity
  activities(type: [String]): [Activity] 
  filter(types: [String!]!): [Filter]
}

type Token {
  token: String!
}

input ClientInput {
  _id: String
  name: String
  address: String
  zipcode: String
  city: String
  telephone: String
  type: String
}

type Mutation {
  addClient(client: ClientInput): Client
  updateClient(client: ClientInput): Client
  
  signup(email: String!, password: String!, firstName: String!, lastName: String!): User
  login(email: String!, password: String!): Token

  updateUser(user: InputUser): User

  seedClients(amount: Int!): [Client]
}

schema {
  query: Query
  mutation: Mutation
}